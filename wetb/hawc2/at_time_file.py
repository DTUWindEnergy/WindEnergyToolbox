'''
Created on 24/04/2014

@author: MMPE
'''
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import
from io import open
from builtins import range
from future import standard_library
standard_library.install_aliases()

import numpy as np
class AtTimeFile(object):
    """Loads an at time file generated by HAWC2
    
    Functions are generated for each sensor in the file from the template:
    xxx(radius=None, curved_length=None)
    
    E.g.
    twist(radius=36) # Twist at radius 36m (Straight line radius, blade_radius must be specified in constructor)
    twist(curved_length=36) # Twist 36m from the root along the (curved) center line
    twist() # Twist at all aerodynamic calculation points
        
    
    >>> at = AtTimeFile("at.dat", 86.3655) # load file
    >>> at.attribute_names # Attribute names
    ['radius_s', 'twist', 'chord']
    >>> at[:3,1]) # first 3 twist rows
    [-14.5    -14.5002 -14.5007]
    >>> at.twist()[:3]) # Twist first 3 twist rows
    [-14.5    -14.5002 -14.5007]
    >>> at.twist(curved_length=36) # Twist at curved_length = 10 (interpolated)
    -5.172195702789108
    >>> at.twist(radius=36) # Twist at curved_length = 10 (interpolated)
    -5.162084567646019
    """
    def __init__(self, filename, bladetip_radius=None):
        """
        Parameters
        ----------
        filename : string
            Filename
        bladetip_radius : int, float or None, optional
            Radius of blade tip. Used to convert from curved length to radius  
        """
        self.blade_radius = bladetip_radius
        with open(filename, encoding='utf-8') as fid:
            lines = fid.readlines()
        self.attribute_names = lines[2].lower().replace("#", "").split()
        data = np.array([[float(l) for l in lines[i].split() ] for i in range(3, len(lines))])
        self.data = data
        def func_factory(column):
            def values(radius=None, curved_length=None):
                assert radius is None or curved_length is None, "Specify either radius or curved_length"
                if radius is None and curved_length is None:
                    return self.data[:, column]
                elif radius is not None:
                    assert self.blade_radius is not None, "bladetip_radius must be specified in __init__ when requesting value of radius (alternatively you can request for curved_length)"
                    return np.interp(radius/self.blade_radius, self.data[:, 0]/self.data[-1, 0], self.data[:, column])
                else:
                    return np.interp(curved_length, self.data[:, 0], self.data[:, column])
            return values
        for column, att_name in enumerate(self.attribute_names):
            setattr(self, att_name, func_factory(column))

    def radius_ac(self, radius=None):
        """Radius (curved distance) of aerodynamic calculation point(s) 

        Parameters
        ----------
        radius : int or float, optional
            - if None (default): Radius of calculation points\n
            - if int or float: Radius of calculation point nearest radius

        Returns
        -------
        radius : float or array_like
            Radius of calculation points or radius of calculation point nearest radius
        """
        if radius is None:
            return self.radius_s()
        else:
            return self.radius_s()[np.argmin(np.abs(self.radius_s() - radius))]

    def value(self, radius, column):
        return np.interp(radius, self.data[:, 0], self.data[:, column])

    def __getitem__(self, subset):
        return self.data[subset]


if __name__ == "__main__":
    at = AtTimeFile(r"tests/test_files/at.dat", 86.3655) # load file
    print (at.attribute_names) # Attribute names
    print (at[:3,1]) # first 3 twist rows
    print (at.twist()[:3]) # first 3 twist rows
    print (at.twist(curved_length=36)) # Twist at curved_length = 10 (interpolated)
    print (at.twist(radius=36)) # Twist at curved_length = 10 (interpolated)

#     at = AtTimeFile(r"tests/test_files/at.dat", 86.3655)
#     print (at.attribute_names)
#     print (at.radius_s())
#     print (at.twist(curved_length=36))
#     print (at.chord(curved_length=36))
#     print (at.twist(curved_length=36))
#     print (at.twist(radius=36))

