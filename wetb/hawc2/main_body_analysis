#%%

from htc_file import HTCFile
import os
import numpy as np
import pandas as pd
import glob
import shutil
import wetb
import h5py
import re


def recursiveGroupSearch(inObj, outObj, ndof=3):
    """ Function to extract the information of an HDF5 visualization file to a dictionary.
    The HDF5 file can be closed immediately after reading, to not hug the file.

    Parameters
    ----------
    inObj : dict
        The HAWC2 structure output. Only tested with loading from the hdf5 file
    outObj : dict
        Dictionary to which the structural output is written.
    ndof : int, optional
        Number of DOF's outputted to the HAWC2 eigenmodes, by default 3. This should NOT be changed unless you know that your version of HAWC2 has been modified to output all 6 dof's.
    """
    for key in inObj.keys():
        if str(type(inObj[f'{key}'])) == "<class 'h5py._hl.group.Group'>":
            outObj[f'{key}'] = {}
            recursiveGroupSearch(inObj[f'{key}'], outObj[f'{key}'], ndof)
        elif "_eigenmodes" in key:
            nn = inObj['initial_node_positions'].shape[0]
            eigenmodes = inObj[key][()]
            eigenmodes = np.moveaxis(eigenmodes[:].reshape((eigenmodes.shape[0], 2 * (nn - 1), ndof, -1)), 3, 1)
            eigenmodes_d = eigenmodes[:, :, :, :ndof]
            eigenmodes_d = np.concatenate([eigenmodes_d[:, :, ::2], eigenmodes_d[:, :, -1:]], 2)
            nframes = eigenmodes_d.shape[1]
            sinMax = int(nframes / 4)
            eigenmodes_d = eigenmodes_d[:, sinMax - 1, :, :] + 1j * eigenmodes_d[:, -1, :, :]
            outObj[f"{key}"] = eigenmodes_d / 5.0
        else:
            outObj[f"{key}"] = inObj[key][()]


def bodymode(structure: dict, body: str, mode_type="system", mode=1):
    """This function extracts the body coordinates and the modal amplitudes from the structure dictionary output from recurseGroupSearch().


    Parameters
    ----------
    structure : dict
        Dictionary containing the information of the HAWC2 visualization file (HDF5). This can be generated using recurseGroupSearch().
    body : str
        _description_
    mode_type : str, optional
        The mode type can be set to either 'system' or 'structural' depending on what is available in the HDF5 file, by default "system"
    mode : int, optional
        The mode number. This number is 1-indexed, by default 1

    Returns
    -------
    tuple
        A tuple containing the coodinates of the body, and the modal amplitudes.
    """
    assert mode > 0, "'mode' is 1 indexed - modes <=0 do not exist"
    subbodies = [sb for sb in list(structure[body].keys()) if re.match(body, sb)]
    if len(subbodies) > 1:
        subbodies = [int(sb.replace(f"{body}_", "")) for sb in subbodies]
        subbodies.sort()
        subbodies = [f"{body}_{sb}" for sb in subbodies]

    firstSub = True
    for sb in subbodies:
        subMode = structure[body][f"{sb}"][f"{mode_type}_eigenmodes"][mode - 1, :, :]
        subCoords = structure[body][f"{sb}"]["initial_node_positions"]
        if firstSub:
            firstSub = False
            bodyMode = subMode
            bodyCoords = subCoords
        else:
            bodyMode = np.concatenate([bodyMode, subMode])
            bodyCoords = np.concatenate([bodyCoords, subCoords + bodyCoords[-1, :]])

    return bodyCoords, bodyMode


def get_body_eigenmode(file, body, mode, mode_type, ndof=3):
    f = h5py.File(file, 'r')
    Structure = {}
    recursiveGroupSearch(f['structure'], Structure, ndof=ndof)
    del f
    return bodymode(Structure, body, mode_type=mode_type, mode=mode)





def prepare_mainbody_htc_files(base_htc_file_path, model_path, num_modes=20):
    base_htc = HTCFile(
        filename=base_htc_file_path,
        modelpath=model_path
    )
    main_body_models = []
    for main_body in [mb for mb in base_htc["new_htc_structure"] if mb.name_ == "main_body"]:
        
        # Skip redundant analysis of main bodies using 'copy_main_body'
        if "copy_main_body" in main_body.contents:
            print(f"Skipping analysis of main body '{main_body['name'].str_values()}'. Main body '{main_body['name'].str_values()}' is equivalent to main body'{main_body['copy_main_body'].str_values()}'")
            continue
        
        # Initialize the template htc file:
        TEMPLATE_HTC = HTCFile(
            filename="/home/rsod/Desktop/IEA15MW-RWT_dlb/htc/main_body_analysis_template.htc"
        )
        
        #add comments to the header:
        # TODO Add comment in the header with the following information:
        # TODO (f"This file was automatically generated using wetb version {wetb.__version__}.")
        
        # Add visualization file to get the eigenmodes
        TEMPLATE_HTC.simulation.add_line("visualization", [f"./main_body_eig/main_body_{main_body['name'].str_values()}/eigen_vis.hdf5"])
        
        # Set number of sub-bodies in the main body to 1
        main_body.nbodies = 1
        
        # Add the new_htc_structure section, and add the calculation commands
        TEMPLATE_HTC.add_section("new_htc_structure")
        TEMPLATE_HTC.new_htc_structure.add_line("system_eigenanalysis", [f"./main_body_eig/main_body_{main_body['name'].str_values()}/eigen_all.dat", 1, num_modes, 0.0])
        
        # Write the contents of the main_body 
        TEMPLATE_HTC.new_htc_structure.add_section(main_body)
        
        # Set orientation and constraint of the main body:
        TEMPLATE_HTC.new_htc_structure.add_section("orientation")
        TEMPLATE_HTC.new_htc_structure.orientation.add_section("base")
        TEMPLATE_HTC.new_htc_structure.orientation.base.add_line("body", [f"{main_body['name'].str_values()}"])
        TEMPLATE_HTC.new_htc_structure.orientation.base.add_line("inipos", [0.0, 0.0, 0.0])
        TEMPLATE_HTC.new_htc_structure.orientation.base.add_line("body_eulerang", [0.0, 0.0, 0.0])

        TEMPLATE_HTC.new_htc_structure.add_section("constraint")
        TEMPLATE_HTC.new_htc_structure.constraint.add_section("fix0")
        TEMPLATE_HTC.new_htc_structure.constraint.fix0
        TEMPLATE_HTC.new_htc_structure.constraint.fix0.add_line("body", [f"{main_body['name'].str_values()}"])
        
        # Set name and save htc file
        TEMPLATE_HTC.set_name(f"{model_path}/main_body_analysis/{main_body['name'].str_values()}")
        main_body_models.append(TEMPLATE_HTC)
        TEMPLATE_HTC.save()
    
    return main_body_models


def run_analysis(main_body_models, exe):
    for model in main_body_models:
        model.simulate(exe)


def read_natural_freqs(htc_model):
    system_eigenanalysis_file = htc_model.modelpath + htc_model.new_htc_structure.system_eigenanalysis.str_values().split()[0]
    sys_eig_freqs = pd.read_csv(
        system_eigenanalysis_file,
        skiprows=8,
        usecols=[3,4,5],
        names=["fn", "fd", "log_dec"],
        delimiter="\s+"
    )
    return sys_eig_freqs

def read_modeshapes(htc_model):
    visualization_file = htc_model.modelpath + htc_model.simulation.visualization.str_values().split()[0]
    body = main_body_models[0].new_htc_structure.main_body.name.str_values()
    mode = 1
    bodyCoords, bodyMode = get_body_eigenmode(visualization_file, body, mode, "system", ndof=6)


    return bodyCoords, bodyMode

def delete_old_animation_files(htc_model):
    system_eigenanalysis_file = htc_model.modelpath + htc_model.new_htc_structure.system_eigenanalysis.str_values().split()[0]
    system_eigenanalysis_dir = os.path.dirname(system_eigenanalysis_file)
    old_animation_files = glob.glob(f"{system_eigenanalysis_dir}/mode*_*.dat")
    for file in old_animation_files:
        os.remove(file)


# %%
main_body_models = prepare_mainbody_htc_files(
    base_htc_file_path="/home/rsod/Desktop/IEA15MW-RWT_dlb/htc/IEA_15MW_RWT_Onshore.htc",
    model_path="/home/rsod/Desktop/IEA15MW-RWT_dlb",
    num_modes=50
    )

run_analysis(main_body_models, "/home/rsod/HAWC2/HAWC2MB-x86_64-13.1.0.0.AppImage")

for main_body in main_body_models:
    delete_old_animation_files(main_body)
